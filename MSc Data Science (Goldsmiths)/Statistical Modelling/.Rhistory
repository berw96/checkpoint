} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
return(df)
}
data = filter_nondata(data)
numeric_data = filter_nondata(numeric_data)
length(numeric_data)
{
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
return(df)
}
numeric_data = filter_nondata(numeric_data)
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
return(df)
}
numeric_data = filter_nondata(numeric_data)
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
print("Dataframe scanned.")
return(df)
}
data = read.csv("datasets/Auto.csv")
data = read.csv("datasets/Auto.csv")
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
print("Dataframe scanned.")
return(df)
}
scan_for_copies <- function(cops){
# scan the dataset for copies based on cylinders, model and year.
# Categorical copies skew statistical significance.
# Search through all observations in dataset.
for(i in 1:length(data)){
# Starting from the current observation 'i'
# scan through all remaining observations 'j'.
for(j in i:length(data$name)){
if(
i != j &&
data$cylinders[i] == data$cylinders[j] &&
data$name[i] == data$name[j] &&
data$year[i] == data$year[j]
){
print("Copy found")
# If a copy of 'i' is found, push both to the dataframe
cops = rbind(cops, data[i,], data[j,])
}
}
}
# Return a dataframe of duplicates as a result.
return(cops)
}
##############################################################################
# PREPROCESSING
# Create a dataframe to store duplicate car models.
copies = data.frame()
copies = scan_for_copies(copies)
# Remove duplicates from original based on index.
data = data[!(row.names(data) %in% row.names(copies)),]
# Interpret horsepower as an integer instead of a char.
copies[,4] = as.integer(copies[,4])
data = read.csv("datasets/Auto.csv")
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
print("Dataframe scanned.")
return(df)
}
scan_for_copies <- function(cops){
# scan the dataset for copies based on cylinders, model and year.
# Categorical copies skew statistical significance.
# Search through all observations in dataset.
for(i in 1:length(data)){
# Starting from the current observation 'i'
# scan through all remaining observations 'j'.
for(j in i:length(data$name)){
if(
i != j &&
data$cylinders[i] == data$cylinders[j] &&
data$name[i] == data$name[j] &&
data$year[i] == data$year[j]
){
print("Copy found")
# If a copy of 'i' is found, push both to the dataframe
cops = rbind(cops, data[i,], data[j,])
}
}
}
# Return a dataframe of duplicates as a result.
return(cops)
}
##############################################################################
# PREPROCESSING
# Create a dataframe to store duplicate car models.
copies = data.frame()
copies = scan_for_copies(copies)
# Remove duplicates from original based on index.
data = data[!(row.names(data) %in% row.names(copies)),]
# Interpret horsepower as an integer instead of a char.
copies[,4] = as.integer(copies[,4])
data = read.csv("datasets/Auto.csv")
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
} else if(typeof(data[,j]) == "character"){
print("Character field")
}
}
}
}
print("Dataframe scanned.")
return(df)
}
scan_for_copies <- function(cops){
# scan the dataset for copies based on cylinders, model and year.
# Categorical copies skew statistical significance.
# Search through all observations in dataset.
for(i in 1:length(data$name)){
# Starting from the current observation 'i'
# scan through all remaining observations 'j'.
for(j in i:length(data$name)){
if(
i != j &&
data$cylinders[i] == data$cylinders[j] &&
data$name[i] == data$name[j] &&
data$year[i] == data$year[j]
){
print("Copy found")
# If a copy of 'i' is found, push both to the dataframe
cops = rbind(cops, data[i,], data[j,])
}
}
}
# Return a dataframe of duplicates as a result.
return(cops)
}
##############################################################################
# PREPROCESSING
# Create a dataframe to store duplicate car models.
copies = data.frame()
copies = scan_for_copies(copies)
# Remove duplicates from original based on index.
data = data[!(row.names(data) %in% row.names(copies)),]
# Interpret horsepower as an integer instead of a char.
copies[,4] = as.integer(copies[,4])
# Calculate the arithmetic mean of the duplicates'.
# First initialize an empty dataframe containing all fields.
mean_of_copies = data.frame(
mpg = c(0),
cylinders = c(0),
displacement = c(0),
horsepower = c(0),
weight = c(0),
acceleration = c(0),
year = c(copies$year[1]),
origin = c(copies$origin[1]),
name = (copies$name[1])
)
for(i in 1:6){
mean_of_copies[i] = mean(copies[,i])
}
# Append mean of duplicates to original dataframe.
data = rbind(data, mean_of_copies)
# Extract only the numeric data from our dataset.
# We exclude the 'name' column.
numeric_data = data[,-9]
# Convert numeric data represented in non-numeric form.
# Engine 'horsepower' is represented as 'chr' strings.
numeric_data[,4] = as.integer(numeric_data[,4])
# Calculate mean of horsepower excluding NA values.
mean_hp = mean(numeric_data[,4], na.rm = TRUE)
numeric_data = filter_nondata(numeric_data)
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
if(typeof(data[,j]) == "integer"){
print("Integer field")
data[i,j] = 0
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
data[i,j] = 0.0
} else if(typeof(data[,j]) == "character"){
print("Character field")
data[i,j] = ""
}
}
}
}
print("Dataframe scanned.")
return(df)
}
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
nondata_count = 0
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
nondata_count = nondata_count + 1
if(typeof(data[,j]) == "integer"){
print("Integer field")
data[i,j] = 0
} else if(typeof(data[,j]) == "double"){
print("Double or Numeric field")
data[i,j] = 0.0
} else if(typeof(data[,j]) == "character"){
print("Character field")
data[i,j] = ""
}
}
}
}
# Use recursion to rescan the dataframe for more nondata.
if(nondata_count != 0){
df = filter_nondata(df)
}
# If all nondata has been successfully remove, return the dataframe.
return(df)
}
numeric_data = data[,-9]
# Convert numeric data represented in non-numeric form.
# Engine 'horsepower' is represented as 'chr' strings.
numeric_data[,4] = as.integer(numeric_data[,4])
# Calculate mean of horsepower excluding NA values.
mean_hp = mean(numeric_data[,4], na.rm = TRUE)
numeric_data = filter_nondata(numeric_data)
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
nondata_count = 0
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
nondata_count = nondata_count + 1
if(typeof(df[,j]) == "integer"){
print("Integer field")
df[i,j] = 0
} else if(typeof(df[,j]) == "double"){
print("Double or Numeric field")
df[i,j] = 0.0
} else if(typeof(df[,j]) == "character"){
print("Character field")
df[i,j] = ""
}
}
}
}
# Use recursion to rescan the dataframe for more nondata.
if(nondata_count != 0){
df = filter_nondata(df)
}
# If all nondata has been successfully remove, return the dataframe.
return(df)
}
data = read.csv("datasets/Auto.csv")
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
nondata_count = 0
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
nondata_count = nondata_count + 1
if(typeof(df[,j]) == "integer"){
print("Integer field")
df[i,j] = 0
} else if(typeof(df[,j]) == "double"){
print("Double or Numeric field")
df[i,j] = 0.0
} else if(typeof(df[,j]) == "character"){
print("Character field")
df[i,j] = ""
}
}
}
}
# Use recursion to rescan the dataframe for more nondata.
if(nondata_count != 0){
df = filter_nondata(df)
}
# If all nondata has been successfully remove, return the dataframe.
return(df)
}
scan_for_copies <- function(cops){
# scan the dataset for copies based on cylinders, model and year.
# Categorical copies skew statistical significance.
# Search through all observations in dataset.
for(i in 1:length(data$name)){
# Starting from the current observation 'i'
# scan through all remaining observations 'j'.
for(j in i:length(data$name)){
if(
i != j &&
data$cylinders[i] == data$cylinders[j] &&
data$name[i] == data$name[j] &&
data$year[i] == data$year[j]
){
print("Copy found")
# If a copy of 'i' is found, push both to the dataframe
cops = rbind(cops, data[i,], data[j,])
}
}
}
# Return a dataframe of duplicates as a result.
return(cops)
}
##############################################################################
# PREPROCESSING
# Create a dataframe to store duplicate car models.
copies = data.frame()
copies = scan_for_copies(copies)
# Remove duplicates from original based on index.
data = data[!(row.names(data) %in% row.names(copies)),]
# Interpret horsepower as an integer instead of a char.
copies[,4] = as.integer(copies[,4])
# Calculate the arithmetic mean of the duplicates'.
# First initialize an empty dataframe containing all fields.
mean_of_copies = data.frame(
mpg = c(0),
cylinders = c(0),
displacement = c(0),
horsepower = c(0),
weight = c(0),
acceleration = c(0),
year = c(copies$year[1]),
origin = c(copies$origin[1]),
name = (copies$name[1])
)
for(i in 1:6){
mean_of_copies[i] = mean(copies[,i])
}
# Append mean of duplicates to original dataframe.
data = rbind(data, mean_of_copies)
# Extract only the numeric data from our dataset.
# We exclude the 'name' column.
numeric_data = data[,-9]
# Convert numeric data represented in non-numeric form.
# Engine 'horsepower' is represented as 'chr' strings.
numeric_data[,4] = as.integer(numeric_data[,4])
# Calculate mean of horsepower excluding NA values.
mean_hp = mean(numeric_data[,4], na.rm = TRUE)
numeric_data = filter_nondata(numeric_data)
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
nondata_count = 0
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
nondata_count = nondata_count + 1
if(typeof(df[,j]) == "integer"){
print("Integer field")
df[i,j] = 0
} else if(typeof(df[,j]) == "double"){
print("Double or Numeric field")
df[i,j] = 0.0
} else if(typeof(df[,j]) == "character"){
print("Character field")
df[i,j] = ""
}
}
}
}
# Use recursion to rescan the dataframe for more nondata.
if(nondata_count != 0){
df = filter_nondata(df)
}
# If all nondata has been successfully remove, return the dataframe.
print("All nondata successfully removed.")
return(df)
}
numeric_data = data[,-9]
# Convert numeric data represented in non-numeric form.
# Engine 'horsepower' is represented as 'chr' strings.
numeric_data[,4] = as.integer(numeric_data[,4])
# Calculate mean of horsepower excluding NA values.
mean_hp = mean(numeric_data[,4], na.rm = TRUE)
# Interpret non-data as mean of data in column.
numeric_data = filter_nondata(numeric_data)
filter_nondata <- function(df){
# scan provided dataset 'df' for nondata such as 'NA' or '?'.
# Once found, set it to 0 or "".
nondata_count = 0
for(j in 1:length(df)){
for(i in 1:length(df[,j])){
if(is.na(df[i,j]) || df[i,j] == '?'){
cat("Non-data detected ", "(", df[i,j], "), ", "at ", "[", i, ",", j, "]", "\n", sep = "")
nondata_count = nondata_count + 1
if(typeof(df[,j]) == "integer"){
print("Integer field")
df[i,j] = 0
} else if(typeof(df[,j]) == "double"){
print("Double or Numeric field")
df[i,j] = 0.0
} else if(typeof(df[,j]) == "character"){
print("Character field")
df[i,j] = ""
}
}
}
}
# Use recursion to rescan the dataframe for more nondata.
if(nondata_count != 0){
df = filter_nondata(df)
} else {
print("All nondata successfully removed.")
}
# If all nondata has been successfully remove, return the dataframe.
return(df)
}
numeric_data = data[,-9]
# Convert numeric data represented in non-numeric form.
# Engine 'horsepower' is represented as 'chr' strings.
numeric_data[,4] = as.integer(numeric_data[,4])
# Calculate mean of horsepower excluding NA values.
mean_hp = mean(numeric_data[,4], na.rm = TRUE)
# Interpret non-data as mean of data in column.
numeric_data = filter_nondata(numeric_data)
